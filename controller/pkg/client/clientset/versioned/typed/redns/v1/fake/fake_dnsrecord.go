// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	rednsv1 "github.com/devops-simba/redns/controller/pkg/apis/redns/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDNSRecords implements DNSRecordInterface
type FakeDNSRecords struct {
	Fake *FakeRednsV1
}

var dnsrecordsResource = schema.GroupVersionResource{Group: "redns.devops.snapp.ir", Version: "v1", Resource: "dnsrecords"}

var dnsrecordsKind = schema.GroupVersionKind{Group: "redns.devops.snapp.ir", Version: "v1", Kind: "DNSRecord"}

// Get takes name of the dNSRecord, and returns the corresponding dNSRecord object, and an error if there is any.
func (c *FakeDNSRecords) Get(ctx context.Context, name string, options v1.GetOptions) (result *rednsv1.DNSRecord, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(dnsrecordsResource, name), &rednsv1.DNSRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*rednsv1.DNSRecord), err
}

// List takes label and field selectors, and returns the list of DNSRecords that match those selectors.
func (c *FakeDNSRecords) List(ctx context.Context, opts v1.ListOptions) (result *rednsv1.DNSRecordList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(dnsrecordsResource, dnsrecordsKind, opts), &rednsv1.DNSRecordList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &rednsv1.DNSRecordList{ListMeta: obj.(*rednsv1.DNSRecordList).ListMeta}
	for _, item := range obj.(*rednsv1.DNSRecordList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested dNSRecords.
func (c *FakeDNSRecords) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(dnsrecordsResource, opts))
}

// Create takes the representation of a dNSRecord and creates it.  Returns the server's representation of the dNSRecord, and an error, if there is any.
func (c *FakeDNSRecords) Create(ctx context.Context, dNSRecord *rednsv1.DNSRecord, opts v1.CreateOptions) (result *rednsv1.DNSRecord, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(dnsrecordsResource, dNSRecord), &rednsv1.DNSRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*rednsv1.DNSRecord), err
}

// Update takes the representation of a dNSRecord and updates it. Returns the server's representation of the dNSRecord, and an error, if there is any.
func (c *FakeDNSRecords) Update(ctx context.Context, dNSRecord *rednsv1.DNSRecord, opts v1.UpdateOptions) (result *rednsv1.DNSRecord, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(dnsrecordsResource, dNSRecord), &rednsv1.DNSRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*rednsv1.DNSRecord), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeDNSRecords) UpdateStatus(ctx context.Context, dNSRecord *rednsv1.DNSRecord, opts v1.UpdateOptions) (*rednsv1.DNSRecord, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(dnsrecordsResource, "status", dNSRecord), &rednsv1.DNSRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*rednsv1.DNSRecord), err
}

// Delete takes name of the dNSRecord and deletes it. Returns an error if one occurs.
func (c *FakeDNSRecords) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(dnsrecordsResource, name), &rednsv1.DNSRecord{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDNSRecords) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(dnsrecordsResource, listOpts)

	_, err := c.Fake.Invokes(action, &rednsv1.DNSRecordList{})
	return err
}

// Patch applies the patch and returns the patched dNSRecord.
func (c *FakeDNSRecords) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *rednsv1.DNSRecord, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(dnsrecordsResource, name, pt, data, subresources...), &rednsv1.DNSRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*rednsv1.DNSRecord), err
}
